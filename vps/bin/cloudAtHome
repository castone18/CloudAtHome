#!/bin/bash

usage() {
    echo "
CloudAtHome CLI usage and overview.

USAGE: $0 command [command-options]

To get detailed usage for a command, run:
    cloudAtHome help COMMAND

The list of commands is:

    backup       - backup up the ghost-db and ghost containers
    bash         - enter a bash shell in the container
    install      - install and run docker container
    ls           - list a directory in a container filesystem
    start        - start a stopped container
    stop         - stop a running container
    uninstall    - stop and uninstall all containers (all configuration data will be lost)
"
}

# Detailed command help
# When called with no args, calls usage(), otherwise shows help for a command
cmd_help() {
	case "$1" in
        backup) echo "
    backup
        Not implemented yet.
        "
        ;;
        bash) echo "
    bash [caddy|ghost-db|ghost]
        Enter a bash shell in the container.
        "
        ;;
        install) echo "
    install
        Install and run the CloudAtHome docker containers. The installer will be prompted for
        configuration values such as domain name, ghost database passwords, etc. This cloudAtHome
        script will also be copied to /usr/local/bin. All docker containers will be started 
        with restart unless_stopped, so they should restart on host reboots unless it they are 
        stopped before the reboot.
        "
        ;;
        ls) echo "
    ls [caddy|ghost-db|ghost] directory_name
        List a directory in the container filesystem.
        "
        ;;
        start) echo "
    start [caddy|ghost-db|ghost]
        Start a stopped container.
        "
        ;;
        stop) echo "
    stop [caddy|ghost-db|ghost]
        Stop a running container.
        "
        ;;
        uninstall) echo "
    uninstall
        Remove the cloudAtHome script from /usr/local/bin, stop all the docker containers, and remove all docker
        artifacts (image, volumes, etc.) for each container. All configuration data and blog content will also
        be removed.
        "
        ;;
    *)
        echo "Invalid command $1."
        usage
        exit 1
        ;;
    esac
}

backup() {
    echo "Not implemented yet."
}

bash() {
    docker exec -it $1 /bin/bash
}

install() {
    mkdir -p /srv/caddy/data
    mkdir -p /srv/caddy/config
    mkdir -p /srv/ghost/data
    mkdir -p /srv/ghost-db/data
    mkdir -p /srv/cloudAtHome
    [ ! -f "/srv/caddy/Caddyfile" ] && cp caddy/Caddyfile /srv/caddy/Caddyfile
    [ ! -f "/srv/cloudAtHome/.env" ] && cp dotenv.txt /srv/cloudAtHome/.env
    chmod 770 /srv/cloudAtHome/.env
    chown root:root /srv/cloudAtHome/.env
    #docker network ls | grep confined
    #if [[ $? == 1 ]]; then
    #    docker network create --internal confined
    #fi
    docker network ls | grep bbw
    if [[ $? == 1 ]]; then
        docker network create bbw
    fi

    source /srv/cloudAtHome/.env

    echo "Generic configuration:"
    read -p "   Enter your domain name ($MYDOMAIN) : " domain_name
    if [ ! -z "$domain_name" ]; then
        MYDOMAIN=$domain_name
        sed -i "s/MYDOMAIN=.*/MYDOMAIN=\"$domain_name\"/" /srv/cloudAtHome/.env
        sed -i "s/MYURL=.*/MYURL=\"www.$domain_name\"/" /srv/cloudAtHome/.env
        sed -i "/marker zero/,/marker one/{s%https:.*%https://${MYDOMAIN}, https://www.${MYDOMAIN} \{%}" /srv/caddy/Caddyfile
        sed -i "/marker one/,/marker two/{s%https://cloud.*%https://cloud.${MYDOMAIN}:443 \{%}" /srv/caddy/Caddyfile
        sed -i "/marker two/,/marker three/{s%https://cloud.*%https://cloud.${MYDOMAIN}:8443 \{%}" /srv/caddy/Caddyfile
    fi

    #echo "Web Proxy configuration:"
    #read -p "   Enter VPN IP address of household nextcloud server (${MYNEXTCLOUDIP}) : " nextcloud_ip
    #if [ ! -z "$nextcloud_ip" ]; then
    #    MYNEXTCLOUDIP=$nextcloud_ip
    #    sed -i "s/MYNEXTCLOUDIP=.*/MYNEXTCLOUDIP=\"${nextcloud_ip}\"/" /srv/cloudAtHome/.env
    #    sed -i "/marker one/,/marker two/{s/reverse_proxy.*/reverse_proxy ${MYNEXTCLOUDIP}:11000/}" /srv/caddy/Caddyfile
    #    sed -i "/marker two/,/marker three/{s%reverse_proxy.*%reverse_proxy https://${MYNEXTCLOUDIP}:8080 \{%}" /srv/caddy/Caddyfile
    #fi

    echo "Ghost blog configuration:"
    read -p "   Enter SMTP host name ($MAILHOST) : " smtp_host
    if [ ! -z "$smtp_host" ]; then
        MAILHOST=$smtp_host
        sed -i "s/MAILHOST=.*/MAILHOST=\"${smtp_host}\"/" /srv/cloudAtHome/.env
    fi
    read -p "   Enter SMTP port number ($MAILPORT) : " smtp_port
    if [ ! -z "$smtp_port" ]; then
        MAILPORT=$smtp_port
        sed -i "s/MAILPORT=.*/MAILPORT=${smtp_port}/" /srv/cloudAtHome/.env
    fi
    read -p "   Enter email login user ($MAILUSER) : " email_user
    if [ ! -z "$email_user" ]; then
        MAILPORT=$email_user
        sed -i "s/MAILUSER=.*/MAILUSER=\"${email_user}\"/" /srv/cloudAtHome/.env
    fi
    read -p "   Enter email user password : " -s email_passw
    if [ ! -z "$email_passw" ]; then
        MAILPASSW=$email_passw
        sed -i "s/MAILPASSW=.*/MAILPASSW=\"${email_passw}\"/" /srv/cloudAtHome/.env
    fi
    read -p $'\n'"   Enter email from identity ($MAILFROM) : " email_identity
    if [ ! -z "$email_identity" ]; then
        MAILFROM=$email_identity
        sed -i "s/MAILFROM=.*/MAILFROM=\"${email_identity}\"/" /srv/cloudAtHome/.env
    fi
    read -p "   Enter Ghost database root password : " -s db_rootpassw
    if [ ! -z "$db_rootpassw" ]; then
        DBROOTPASSW=$db_rootpassw
        sed -i "s/DBROOTPASSW=.*/DBROOTPASSW=\"${db_rootpassw}\"/" /srv/cloudAtHome/.env
    fi
    read -p $'\n'"   Enter Ghost database user password : " -s db_userpassw
    if [ ! -z "$db_userpassw" ]; then
        DBUSERPASSW=$db_userpassw
        sed -i "s/DBUSERPASSW=.*/DBUSERPASSW=\"${db_userpassw}\"/" /srv/cloudAtHome/.env
    fi

    cat /srv/caddy/Caddyfile
    read -p $'\n'"Please verify contents of Web Proxy configuration file. Proceed (Y/n) ? " answer
    if [ ! -z "$answer" ]; then
        if [[ $answer != "Y" && $answer != "y" ]]; then
            exit 1
        fi
    fi

    echo ""
    echo ""
    cat /srv/cloudAtHome/.env
    read -p "Please verify contents of docker compose configuration variables file. Proceed (Y/n) ? " answer
    if [ ! -z "$answer" ]; then
        if [[ $answer != "Y" && $answer != "y" ]]; then
            exit 1
        fi
    fi

    docker ps -a | grep openvpn
    if [[ $? == 1 ]]; then
        docker pull castone38/dockervpn:latest
        docker run --rm castone38/dockervpn:latest cat /opt/dockervpn >./dockervpn
        chmod +x ./dockervpn
        ./dockervpn install $MYDOMAIN 1200
        ufw status | grep "1200/udp"
        if [[ $? == 1 ]]; then
            ufw allow 1200/udp comment "openvpn"
            ufw reload
        fi
        rm ./dockervpn
    fi

    [ ! -f "/srv/cloudAtHome/docker-compose.yml" ] && cp docker-compose.yml /srv/cloudAtHome/docker-compose.yml
    cd /srv/cloudAtHome
    docker-compose up -d
}

ls() {
    docker exec -it $1 ls -AlF $2
}

start() {
    docker start $1
}

stop() {
    docker stop $1
}

uninstall() {
    cd /srv/cloudAtHome
    docker-compose down --remove-orphans
    docker stop openvpn
    docker rm openvpn
    docker volume rm openvpn_data
    docker image rm castone38/dockervpn:latest
    docker network rm bbw
    rm -f /usr/local/bin/dockervpn
    cd /
    rm -rf /srv/caddy
    rm -rf /srv/ghost-db
    rm -rf /srv/ghost
    rm -rf /srv/cloudAtHome
    rm -f /usr/local/bin/cloudAtHome
    ufw delete allow 1200/udp
    ufw reload
}


amiroot=`id -u`
if (( $amiroot !=0 )); then
    echo "You must run this script as root, or with sudo."
    exit 1
fi

cmd="$1"
[ -n "$1" ] && shift # scrape off command
case "$cmd" in
    backup)
        backup
        ;;
    bash)
        bash
        ;;
	help)
        if [ -z "$@" ]; then
            usage
        else
		    cmd_help "$@"
        fi
		;;
    install)
        install
        ;;
    ls)
        ls "$@"
        ;;
    start)
        start "$@"
        ;;
    stop)
        stop "$@"
        ;;
    uninstall)
        uninstall
        ;;
    *)
        usage
        exit 1
    ;;
esac

exit 0
